const transformTDAGetAccountsSecuritiesAccount = (a) => ({
	type: a.type,
	accountId: a.accountId,
	roundTrips: a.roundTrips,
	isDayTrader: a.isDayTrader,
	isClosingOnlyRestricted: a.isClosingOnlyRestricted,
	initialBalances: {
		accruedInterest: a.initialBalances.accruedInterest,
		cashAvailableForTrading: a.initialBalances.cashAvailableForTrading,
		cashAvailableForWithdrawal: a.initialBalances.cashAvailableForWithdrawal,
		cashBalance: a.initialBalances.cashBalance,
		bondValue: a.initialBalances.bondValue,
		cashReceipts: a.initialBalances.cashReceipts,
		liquidationValue: a.initialBalances.liquidationValue,
		longOptionMarketValue: a.initialBalances.longOptionMarketValue,
		longStockValue: a.initialBalances.longStockValue,
		moneyMarketFund: a.initialBalances.moneyMarketFund,
		mutualFundValue: a.initialBalances.mutualFundValue,
		shortOptionMarketValue: a.initialBalances.shortOptionMarketValue,
		shortStockValue: a.initialBalances.shortStockValue,
		isInCall: a.initialBalances.isInCall,
		unsettledCash: a.initialBalances.unsettledCash,
		cashDebitCallValue: a.initialBalances.cashDebitCallValue,
		pendingDeposits: a.initialBalances.pendingDeposits,
		accountValue: a.initialBalances.accountValue,
	},
	currentBalances: {
		accruedInterest: a.currentBalances.accruedInterest,
		cashBalance: a.currentBalances.cashBalance,
		cashReceipts: a.currentBalances.cashReceipts,
		longOptionMarketValue: a.currentBalances.longOptionMarketValue,
		liquidationValue: a.currentBalances.liquidationValue,
		longMarketValue: a.currentBalances.longMarketValue,
		moneyMarketFund: a.currentBalances.moneyMarketFund,
		savings: a.currentBalances.savings,
		shortMarketValue: a.currentBalances.shortMarketValue,
		pendingDeposits: a.currentBalances.pendingDeposits,
		cashAvailableForTrading: a.currentBalances.cashAvailableForTrading,
		cashAvailableForWithdrawal: a.currentBalances.cashAvailableForWithdrawal,
		cashCall: a.currentBalances.cashCall,
		longNonMarginableMarketValue: a.currentBalances.longNonMarginableMarketValue,
		totalCash: a.currentBalances.totalCash,
		shortOptionMarketValue: a.currentBalances.shortOptionMarketValue,
		mutualFundValue: a.currentBalances.mutualFundValue,
		bondValue: a.currentBalances.bondValue,
		cashDebitCallValue: a.currentBalances.cashDebitCallValue,
		unsettledCash: a.currentBalances.unsettledCash,
	},
	projectedBalances: {
		cashAvailableForTrading: a.projectedBalances.cashAvailableForTrading,
		cashAvailableForWithdrawal: a.projectedBalances.cashAvailableForWithdrawal,
	},
});

const transformTDAQuote = (d) => ({
	assetType: d.assetType,
	assetMainType: d.assetMainType,
	cusip: d.cusip,
	assetSubType: d.assetSubType,
	symbol: d.symbol,
	description: d.description,
	bidPrice: d.bidPrice,
	bidSize: d.bidSize,
	bidId: d.bidId,
	askPrice: d.askPrice,
	askSize: d.askSize,
	askId: d.askId,
	lastPrice: d.lastPrice,
	lastSize: d.lastSize,
	lastId: d.lastId,
	openPrice: d.openPrice,
	highPrice: d.highPrice,
	lowPrice: d.lowPrice,
	bidTick: d.bidTick,
	closePrice: d.closePrice,
	netChange: d.netChange,
	totalVolume: d.totalVolume,
	quoteTimeInLong: d.quoteTimeInLong,
	tradeTimeInLong: d.tradeTimeInLong,
	mark: d.mark,
	exchange: d.exchange,
	exchangeName: d.exchangeName,
	marginable: d.marginable,
	shortable: d.shortable,
	volatility: d.volatility,
	digits: d.digits,
	'52WkHigh': d['52WkHigh'],
	'52WkLow': d['52WkLow'],
	nAV: d.nAV,
	peRatio: d.peRatio,
	divAmount: d.divAmount,
	divYield: d.divYield,
	divDate: d.divDate,
	securityStatus: d.securityStatus,
	regularMarketLastPrice: d.regularMarketLastPrice,
	regularMarketLastSize: d.regularMarketLastSize,
	regularMarketNetChange: d.regularMarketNetChange,
	regularMarketTradeTimeInLong: d.regularMarketTradeTimeInLong,
	netPercentChangeInDouble: d.netPercentChangeInDouble,
	markChangeInDouble: d.markChangeInDouble,
	markPercentChangeInDouble: d.markPercentChangeInDouble,
	regularMarketPercentChangeInDouble: d.regularMarketPercentChangeInDouble,
	delayed: d.delayed,
	realtimeEntitled: d.realtimeEntitled,
});

module.exports = {
	transformTDAGetAccountsResponse: (data) => data.map((a) => ({
		securitiesAccount: transformTDAGetAccountsSecuritiesAccount(a.securitiesAccount),
	})),
	transformTDAGetQuoteResponse: (data) => transformTDAQuote(data[Object.keys(data)[0]]),
	transformTDAGetUserPrincipalsResponse: (d) => ({
		userId: d.userId,
		userCdDomainId: d.userCdDomainId,
		primaryAccountId: d.primaryAccountId,
		lastLoginTime: d.lastLoginTime,
		tokenExpirationTime: d.tokenExpirationTime,
		loginTime: d.loginTime,
		accessLevel: d.accessLevel,
		stalePassword: d.stalePassword,
		streamerInfo: {
			streamerBinaryUrl: d.streamerInfo.streamerBinaryUrl,
			streamerSocketUrl: d.streamerInfo.streamerSocketUrl,
			token: d.streamerInfo.token,
			tokenTimestamp: d.streamerInfo.tokenTimestamp,
			userGroup: d.streamerInfo.userGroup,
			accessLevel: d.streamerInfo.accessLevel,
			acl: d.streamerInfo.acl,
			appId: d.streamerInfo.appId,
		},
		professionalStatus: d.professionalStatus,
		quotes: {
			isNyseDelayed: d.quotes.isNyseDelayed,
			isNasdaqDelayed: d.quotes.isNasdaqDelayed,
			isOpraDelayed: d.quotes.isOpraDelayed,
			isAmexDelayed: d.quotes.isAmexDelayed,
			isCmeDelayed: d.quotes.isCmeDelayed,
			isIceDelayed: d.quotes.isIceDelayed,
			isForexDelayed: d.quotes.isForexDelayed,
		},
		streamerSubscriptionKeys: {
			keys: (d.streamerSubscriptionKeys.keys || []).map((k) => ({
				key: k.key,
			})),
		},
		exchangeAgreements: {
			NASDAQ_EXCHANGE_AGREEMENT: d.exchangeAgreements.NASDAQ_EXCHANGE_AGREEMENT,
			NYSE_EXCHANGE_AGREEMENT: d.exchangeAgreements.NYSE_EXCHANGE_AGREEMENT,
			OPRA_EXCHANGE_AGREEMENT: d.exchangeAgreements.OPRA_EXCHANGE_AGREEMENT,
		},
		accounts: (d.accounts || []).map((a) => ({
			accountId: a.accountId,
			displayName: a.displayName,
			accountCdDomainId: a.accountCdDomainId,
			company: a.company,
			segment: a.segment,
			acl: a.acl,
			authorizations: {
				apex: a.authorizations.apex,
				levelTwoQuotes: a.authorizations.levelTwoQuotes,
				stockTrading: a.authorizations.stockTrading,
				marginTrading: a.authorizations.marginTrading,
				streamingNews: a.authorizations.streamingNews,
				optionTradingLevel: a.authorizations.optionTradingLevel,
				streamerAccess: a.authorizations.streamerAccess,
				advancedMargin: a.authorizations.advancedMargin,
				scottradeAccount: a.authorizations.scottradeAccount,
			},
		})),
	}),
};
